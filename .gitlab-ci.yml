stages:
  - test

test-backend:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
  image: python:3.10-slim
  stage: test
  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # Pip's cache doesn't store the python packages
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  cache:
    key: explori-backend
    paths:
      - .cache/pip
      - venv/
  before_script:
    # TODO: this is a bit ugly. we don't want to do replicate Dockerfile_backend but rather use that dockerfile to make
    # sure we test under the same conditions as we run our application. Look into building the backend image and using
    # it as base image for these tests. Make sure the image doesn't get build every time, though! These tests are
    # meant to be run on every commit (not only every merge request). This also removes the need for the hack below.
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential libgomp1
    - python -m venv "$CI_PROJECT_DIR"/venv
    - source "$CI_PROJECT_DIR"/venv/bin/activate
    - pip install -r backend/requirements.txt
  script:
    - cd backend/
    - PYTHONPATH=src/ python -m unittest discover -p *_tests.py
